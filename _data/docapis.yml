sidebartitle: Documenting APIs
folders:

- title: "Course overview"
  landing: /learnapidoc/docapis_overview.html
  section: zero
  class: first
  description: >
    This section provides a high-level, detailed overview for the API documentation course. I introduce the goals of the course, explain why I developed it, tell you a bit about myself, provide some recordings, slides, and more.
  folderitems:
  - title: Overview
    jurl: /learnapidoc/docapis_overview.html
    type: web

  - title: "Course introduction" 
    jurl: /learnapidoc/index.html

  - title: Why I developed this course
    jurl: /learnapidoc/docapis_foreword.html

  - title: About the author
    jurl: /learnapidoc/docapis_about_the_author.html

  - title: Download PDFs
    jurl: /learnapidoc/download.html

  - title: Workshop video recordings
    jurl: /learnapidoc/docapis_course_videos.html

  - title: Workshop agenda, slides, activities
    jurl: /learnapidoc/workshop.html

  - title: "What's new"
    jurl: /learnapidoc/docapis_whats_new.html

- title: "Chapter 1: Introduction to REST APIs"
  landing: /learnapidoc/docapis_introtoapis.html
  section: one
  description: >
    REST APIs consist of requests and responses between clients and servers over the web. Although there are many types of APIs, REST APIs are flourishing, and there's a strong need for API documentation at almost every company that provides an API. Technical writers can apply their skills to fill this gap in highly valuable ways. This introduction discusses different types of APIs, reasons for API growth, and why docs are critical for REST APIs. It outlines course contents, prerequisites, goals, and target audiences. The introduction sets the stage for learning API documentation through the hands-on activities in the course.
  folderitems:

  - title: "Overview" 
    jurl: /learnapidoc/docapis_introtoapis.html
    type: web

  - title: Introduction to REST API documentation
    jurl: /learnapidoc/docapis_intro_to_rest_api_doc.html

  - title: What is a REST API?
    jurl: /learnapidoc/docapis_what_is_a_rest_api.html

  - title: "Activity: Identify your goals"
    jurl: /learnapidoc/docapis_identify_your_goals.html

  - title: "Developer Documentation Trends: Survey Results"
    jurl: /learnapidoc/docapis_trends.html

- title: "Chapter 2: Using an API like a developer"
  landing: /learnapidoc/likeadeveloper.html
  section: two
  description: > 
    In this chapter, you use a REST API like a developer would. You get API keys, make requests with Postman and curl, analyze JSON responses, and dynamically display API responses on a web page. These hands-on activities give you context for understanding developer needs and workflow. After using the API in this way, you switch perspectives and prepare to start documenting an API as a technical writer.
  folderitems:

  - title: "Overview" 
    jurl: /learnapidoc/likeadeveloper.html
    type: web

  - title: "Scenario for using a weather API"
    jurl: /learnapidoc/docapis_scenario_for_using_weather_api.html

  - title: "Get authorization keys"
    jurl: /learnapidoc/docapis_get_auth_keys.html

  - title: "Submit requests through Postman"
    jurl: /learnapidoc/docapis_postman.html

  - title: "curl intro and installation"
    jurl: /learnapidoc/docapis_install_curl.html

  - title: "Make a curl call"
    jurl: /learnapidoc/docapis_make_curl_call.html

  - title: "Understand curl more"
    jurl: /learnapidoc/docapis_understand_curl.html

  - title: "Activity: Use methods with curl"
    jurl: /learnapidoc/docapis_curl_with_petstore.html

  - title: "Analyze the JSON response"
    jurl: /learnapidoc/docapis_analyze_json.html

  - title: "Inspect the JSON from the response payload"
    jurl: /learnapidoc/docapis_json_console.html

  - title: "Access and print a specific JSON value"
    jurl: /learnapidoc/docapis_access_json_values.html

  - title: "Dive into dot notation"
    jurl: /learnapidoc/docapis_diving_into_dot_notation.html

- title: "Chapter 3: Documenting API endpoints"
  landing: /learnapidoc/docendpoints.html
  section: three
  description: > 
    The bulk of API documentation focuses on the resources available (accessed through endpoints) and the data returned. API reference documentation usually includes five key sections for each resource: resource description, endpoints and methods to access the resource, parameters, request examples, and response examples and schemas. After learning about each section, you document a sample resource. You also evaluate and improve existing API reference topics.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/docendpoints.html
    type: web

  - title: "A new endpoint to document"
    jurl: /learnapidoc/docapis_new_endpoint_to_doc.html

  - title: "API reference tutorial overview"
    jurl: /learnapidoc/docapis_api_reference_tutorial_overview.html

  - title: "Step 1: Resource description"
    jurl: /learnapidoc/docapis_resource_descriptions.html

  - title: "Step 2: Endpoints and methods"
    jurl: /learnapidoc/docapis_resource_endpoints.html

  - title: "Step 3: Parameters"
    jurl: /learnapidoc/docapis_doc_parameters.html

  - title: "Step 4: Request example"
    jurl: /learnapidoc/docapis_doc_sample_requests.html

  - title: "Step 5: Response example and schema"
    jurl: /learnapidoc/docapis_doc_sample_responses_and_schema.html

  - title: "Putting it all together"
    jurl: /learnapidoc/docapis_finished_doc_result.html

  - title: "Activity: What's wrong with this API reference topic"
    jurl: /learnapidoc/docapis_api_whats_wrong_activity.html

  - title: "Activity: Evaluate API reference docs for core elements"
    jurl: /learnapidoc/docapis_api_reference_activity.html

- title: "Chapter 4: OpenAPI spec and generated reference docs"
  landing: /learnapidoc/restapispecifications.html
  section: four
  description: >
    The OpenAPI specification provides a standard way to describe REST APIs, and includes elements such as paths, operations, parameters, and schemas. Tools like Stoplight, Swagger UI, SwaggerHub, and Redocly can generate interactive API reference documentation from the OpenAPI spec. In this chapter, you follow a tutorial for using Stoplight, a visual editor, to create an OpenAPI specification file and publish the documentation. As you work with the OpenAPI spec, you learn about "spec-first development," a philosophy of creating the spec before developers write API code, as well as other challenges, such as integrating the reference output and conceptual documentation in a seamless experience.

  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/restapispecifications.html
    type: web

  - title: "Overview of REST API specification formats"
    jurl: /learnapidoc/pubapis_rest_specification_formats.html

  - title: "Introduction to the OpenAPI specification"
    jurl: /learnapidoc/pubapis_openapi_intro.html

  - title: "Stoplight: Visual modeling tools for creating your spec"
    jurl: /learnapidoc/pubapis_stoplight.html

  - title: "Getting started tutorial: Using Stoplight to create an OpenAPI specification document"
    jurl: /learnapidoc/pubapis_openapis_quickstart_stoplight.html

  - title: "Swagger UI tutorial"
    jurl: /learnapidoc/pubapis_swagger.html

  - title: "SwaggerHub introduction and tutorial"
    jurl: /learnapidoc/pubapis_swaggerhub_smartbear.html

  - title: "Swagger UI Demo"
    jurl: /learnapidoc/pubapis_swagger_demo.html

  - title: "Integrating Swagger UI with the rest of your docs"
    jurl: /learnapidoc/pubapis_combine_swagger_and_guide.html

  - title: "Redocly tutorial -- authoring and publishing API docs with Redocly's command-line tools"
    jurl: /learnapidoc/pubapis_redocly.html

  - title: "Redoc Community Edition Basic Demo"
    jurl: /learnapidoc/pubapis_redoc.html

- title: "Chapter 5: Step-by-step OpenAPI code tutorial"
  landing: /learnapidoc/openapi_tutorial.html
  section: five
  description: > 
    Whereas the previous chapter involved building and publishing OpenAPI specification using a visual editor (Stoplight), in this chapter you code the spec by hand following a step-by-step tutorial using the Swagger Editor. You populate each of the main objects in the OpenAPI spec: `openapi`, `info`, `servers`, `paths`, `components`, `security`, `tags`, and `externalDocs`. For each object, you can refer to code samples and see how the source maps to the documentation output. The goal is to gain familiarity with the OpenAPI objects and properties by building a valid OpenAPI file from scratch.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/openapi_tutorial.html
    type: web

  - title: "OpenAPI tutorial using Swagger Editor and Swagger UI: Overview"
    jurl: /learnapidoc/pubapis_openapi_tutorial_overview.html

  - title: "Working in YAML"
    jurl: /learnapidoc/pubapis_yaml.html

  - title: "Step 1: The openapi object"
    jurl: /learnapidoc/pubapis_openapi_step1_openapi_object.html

  - title: "Step 2: The info object"
    jurl: /learnapidoc/pubapis_openapi_step2_info_object.html

  - title: "Step 3: The servers object"
    jurl: /learnapidoc/pubapis_openapi_step3_servers_object.html

  - title: "Step 4: The paths object"
    jurl: /learnapidoc/pubapis_openapi_step4_paths_object.html

  - title: "Step 5: The components object"
    jurl: /learnapidoc/pubapis_openapi_step5_components_object.html

  - title: "Step 6: security object"
    jurl: /learnapidoc/pubapis_openapi_step6_security_object.html

  - title: "Step 7: The tags object"
    jurl: /learnapidoc/pubapis_openapi_step7_tags_object.html

  - title: "Step 8: The externalDocs object"
    jurl: /learnapidoc/pubapis_openapi_step8_externaldocs_object.html

  - title: "Activity: Create an OpenAPI specification document"
    jurl: /learnapidoc/pubapis_openapi_activity.html

- title: "Chapter 6: Testing API docs"
  landing: /learnapidoc/testingdocs.html
  section: six
  description: >
    Testing documentation against your APIs is critical for documentation quality. Fortunately, testing REST APIs and their responses tends involves less setup and expertise than testing library-based APIs like Java. Even so, to test your docs, you need to set up a test environment and get access to API keys or other resources. This will involve collaborating with QA teams. Your goal should be to walk through your instructions personally, making test calls and verifying the responses. You also should push back against any technical assumptions as you champion user needs. In short, testing docs means avoiding passively documenting what engineers say but rather actively validating as much as you can.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/testingdocs.html
    type: web

  - title: "Overview of testing your docs"
    jurl: /learnapidoc/testingdocs_overview.html

  - title: "Set up a test environment"
    jurl: /learnapidoc/testingdocs_test_environment.html

  - title: "Test all instructions yourself"
    jurl: /learnapidoc/testingdocs_test_your_instructions.html

  - title: "Test your assumptions"
    jurl: /learnapidoc/testingdocs_testing_assumptions.html

  - title: "Activity: Test your project's documentation"
    jurl: /learnapidoc/testingdocs_activity.html

- title: "Chapter 7: Conceptual topics in API docs"
  landing: /learnapidoc/docconceptual.html
  section: seven
  description: >
    Conceptual topics that make up documentation include product overviews, getting started tutorials, authentication and authorization, status and error codes, rate limiting and thresholds, quick reference guides, glossaries, and best practices. These topics provide critical context for understanding and using the API beyond just the reference documentation. The chapter explores best practices for each topic, reasons why the topics are often neglected, and includes examples from API documentation sites. Activities guide you to evaluate these topics in an open source API project and decide which examples demonstrate best practices. The chapter emphasizes the importance of conceptual documentation in facilitating the user's journey in understanding and adopting the API.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/docconceptual.html
    type: web

  - title: "API conceptual topics overview"
    jurl: /learnapidoc/docapis_conceptual_topics_overview.html

  - title: "API product overviews"
    jurl: /learnapidoc/docapis_doc_overview.html

  - title: "API getting started tutorials"
    jurl: /learnapidoc/docapis_doc_getting_started_section.html

  - title: API authentication and authorization
    jurl: /learnapidoc/docapis_more_about_authorization.html

  - title: "API status and error codes"
    jurl: /learnapidoc/docapis_doc_status_codes.html

  - title: "API rate limiting and thresholds"
    jurl: /learnapidoc/docapis_rate_limiting_and_thresholds.html

  - title: "API quick reference"
    jurl: /learnapidoc/docapis_doc_quick_reference.html

  - title: "API glossary"
    jurl: /learnapidoc/docapis_glossary_section.html

  - title: "API best practices"
    jurl: /learnapidoc/docapis_best_practices_with_api.html

  - title: "Activity: Complete the SendGrid Getting Started tutorial"
    jurl: /learnapidoc/docapis_getting_started_activity.html

  - title: "Activity: Assess the conceptual content in your project"
    jurl: /learnapidoc/docapis_concept_activity.html

- title: "Chapter 8: Code tutorials"
  landing: /learnapidoc/docapiscode.html
  section: eight
  description: >
    Documenting code can be one of the most challenging aspects of API documentation, especially for non-engineers. Code can be hard to document because of its non-linear nature. For example,you don't simply start by describing chunks of code from top to bottom. Figuring out your audience's technical level can also be a guessing game, as a user's proficiency in one language or area might not carry over to another. As you document code, focus on the "why" instead of the "how," and consider building up complexity in stages, starting simple and expanding into more advanced use cases. If you can provide interactive browser experiences with code, which allows users to adjust the input and immediately see the output, this can also help developers learn.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/docapiscode.html
    type: web

  - title: "Common characteristics of code tutorials"
    jurl: /learnapidoc/docapis_code_tutorials_common_characteristics.html

  - title: Why documenting code is so difficult
    jurl: /learnapidoc/docapis_code_difficulty.html

  - title: What research tells us about documenting code
    jurl: /learnapidoc/docapiscode_research_on_documenting_code.html

  - title: Five strategies for documenting code
    jurl: /learnapidoc/docapis_code_strategies.html

  - title: Code samples
    jurl: /learnapidoc/docapis_codesamples_bestpractices.html

  - title: Sample apps
    jurl: /learnapidoc/docapis_sample_apps.html

  - title: SDKs (software development kits)
    jurl: /learnapidoc/docapis_sdks.html

  - title: "API design and usability"
    jurl: /learnapidoc/evaluating-api-design.html

  - title: "Developer experience (DevX) usability"
    jurl: /learnapidoc/devx-usability-examples.html

- title: "Chapter 9: The writing process"
  landing: /learnapidoc/writing_process.html
  section: nine
  description: > 
    The five main steps in the documentation writing process include **(1) Planning** (creating a doc plan, establishing roles), **(2) Gathering information** (interviewing engineers, product managers, etc.), **(3) Writing** (separating content into groups, outlining, scheduling reviews, writing the first draft), **(4) Reviewing** (reaching out to the right people, incorporating feedback, resolving conflicts), and **(5) Publishing** (integrating new content, adding metadata, coordinating timing, publicizing releases). This chapter provides practical tips in each writing step, such as recording engineering interviews, bringing questions to review meetings, and publicizing releases through newsletters. Although many other aspects of API documentation might seem more pressing, such as configuring your publishing toolchain, writing is still a core task technical writers do when creating API documentation.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/writing_process.html
    type: web

  - title: "Overview of the writing process"
    jurl: /learnapidoc/docapis_writing_process_overview.html

  - title: "1. Planning"
    jurl: /learnapidoc/docapis_planning.html

  - title: "2. Information gathering"
    jurl: /learnapidoc/docapis_information_gathering.html

  - title: "3. Writing"
    jurl: /learnapidoc/docapis_writing.html

  - title: "4. Reviewing"
    jurl: /learnapidoc/docapis_reviewing.html

  - title: "5. Publishing"
    jurl: /learnapidoc/docapis_publishing.html

- title: "Chapter 10: Publishing API docs"
  landing: /learnapidoc/publishingapis.html
  section: ten
  description: >
    When you're publishing API documentation, it's important to have consistent structure and templates, ensure seamless branding, provide plenty of code samples, and follow other API documentation conventions. If you can include an interactive API explorer, users will love it. In this chapter, you dive into tools like Jekyll, Hugo, Sphinx, GitHub Pages, and ReadTheDocs for documentation. The chapter encourages you to embrace the docs-as-code approach, which means using static site generators, version control (Git), lightweight documentation syntax (Markdown), continuous integration, and more. Docs-as-code tools fit well into engineering workflows, making it easier for developers to contribute and review documentation.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/publishingapis.html
    type: web

  - title: "Overview for publishing API docs"
    jurl: /learnapidoc/pubapis_overview.html

  - title: "Survey of API doc sites"
    jurl: /learnapidoc/pubapis_apilist.html

  - title: "Design patterns with API doc sites"
    jurl: /learnapidoc/pubapis_design_patterns.html

  - title: "Docs-as-code tools"
    jurl: /learnapidoc/pubapis_docs_as_code.html

  - title: "More about Markdown"
    jurl: /learnapidoc/pubapis_markdown.html

  - title: "Version control systems"
    jurl: /learnapidoc/pubapis_version_control.html

  - title: "Static site generators"
    jurl: /learnapidoc/pubapis_static_site_generators.html

  - title: "Hosting and deployment options"
    jurl: /learnapidoc/pubapis_hosting_and_deployment.html

  - title: "Hybrid documentation systems"
    jurl: /learnapidoc/pubapis_hybrid_systems.html

  - title: "Which tool to choose for API docs &mdash; my recommendations"
    jurl: /learnapidoc/pubapis_which_tool_to_choose.html

- title: "Chapter 11: Publishing tools"
  landing: /learnapidoc/publishingtools.html
  section: eleven
  description: > 
    Publishing technical documentation typically involves following docs-as-code tools and workflows. For open source projects, GitHub is frequently used to manage content. But even within the enterprise, Git is still common. A typical documentation workflow involves making pull requests with doc changes that get rolled into the main branch. In this chapter, you explore some of these workflows using tools like GitHub wikis, Jekyll, CloudCannon, Oxygen XML and more. It's important to become comfortable working from the command line to create branches, get updates, perform merges, and push builds.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/publishingtools.html
    type: web
    
  - title: "Activity: Manage content in a GitHub wiki"
    jurl: /learnapidoc/pubapis_github_wikis.html

  - title: "Activity: Use the GitHub Desktop Client"
    jurl: /learnapidoc/pubapis_github_desktop_client.html

  - title: "Activity: Pull request workflows through GitHub"
    jurl: /learnapidoc/pubapis_github_pull_requests.html

  - title: "Jekyll and CloudCannon continuous deployment tutorial"
    jurl: /learnapidoc/pubapis_jekyll.html

  - title: "Using Oxygen XML with docs-as-code workflows"
    jurl: /learnapidoc/pubapis_oxygenxml.html

  - title: "Blobr: An API portal that arranges your API's use cases as individual products"
    jurl: /learnapidoc/pubapis_blobr.html

  - title: "Case study: Switching tools to docs-as-code"
    jurl: /learnapidoc/pubapis_switching_to_docs_as_code.html

  - title: "Tools FAQ"
    jurl: /learnapidoc/docapis_faq_tools.html

- title: "Chapter 12: Thriving in the API doc space"
  landing: /learnapidoc/jobapis.html
  section: twelve
  description: >
    Getting a job in API documentation requires you to have some familiarity programming languages, experience writing developer docs, and a portfolio of writing samples. Chances are, hiring managers will want you to be tech savvy and comfortable working in code, with less to say about your actual writing skills. While opportunities for API documentation roles exist globally, tech hubs such as California, Texas, New York, and Virginia have a higher concentration of these jobs. If you need to build up a writing portfolio, consider contributing to open source projects and creating sample API reference documentation.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/jobapis.html
    type: web

  - title: "The job market for API technical writers"
    jurl: /learnapidoc/jobapis_overview.html

  - title: "How much code do you need to know?"
    jurl: /learnapidoc/jobapis_learning_code.html

  - title: "Best locations for API documentation jobs"
    jurl: /learnapidoc/jobapis_location.html

  - title: "Activity: Find an Open-Source Project"
    jurl: /learnapidoc/docapis_find_open_source_project.html

  - title: "Activity: Create or fix an API reference documentation topic"
    jurl: /learnapidoc/docapis_work_on_conceptual_topic.html

- title: "Chapter 13: Library-based APIs"
  landing: /learnapidoc/nativelibraryapis.html
  section: thirteen
  description: >
    Library-based APIs are programming-language-specific APIs, such as Java and C++ libraries (instead of web APIs) that developers compile into their code instead of accessing via web protocols. If you're documenting a library-based API, at least for the reference content, you add documentation in the form of code comments (following specific tags), and then build the output using tools like Javadoc (for Java) or Doxygen (for C++). Each library-based API has its own documentation generators that build from source and output documentation from comments in that source. Although working in the source code might seem uncomfortable at first, it's essential to become familiar with these workflows if you want to contribute to the API's reference documentation.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/nativelibraryapis.html
    type: web

  - title: "Overview of native library APIs"
    jurl: /learnapidoc/nativelibraryapis_overview.html

  - title: "Get the sample Java project"
    jurl: /learnapidoc/nativelibraryapis_getting_the_source.html

  - title: "Java crash course"
    jurl: /learnapidoc/nativelibraryapis_java_crash_course.html

  - title: "Activity: Generate a Javadoc from a sample project"
    jurl: /learnapidoc/nativelibraryapis_create_javadoc.html

  - title: "Javadoc tags"
    jurl: /learnapidoc/nativelibraryapis_javadoc_tags.html

  - title: "Explore the Javadoc output"
    jurl: /learnapidoc/nativelibraryapis_exploring_javadoc_output.html

  - title: "Make edits to Javadoc tags"
    jurl: /learnapidoc/nativelibraryapis_editing_javadoc.html

  - title: "Doxygen, a document generator mainly for C++"
    jurl: /learnapidoc/nativelibraryapis_doxygen.html

  - title: "Create non-ref docs with native library APIs"
    jurl: /learnapidoc/nativelibraryapis_nonrefdocs.html

- title: "Chapter 14: Processes and methodology"
  landing: /learnapidoc/docapis_managing_doc_processes.html
  section: fourteen
  description: > 
    This chapter dives into project methodologies to manage technical documentation work. For both extensive projects and minor documentation requests, file the requests as bugs and managing them using a Scrum-like methodology, preferably following similar management processes as your engineers. You need to understand your engineering organization's release cycle process and plug documentation into that cadence so that you can anticipate upcoming documentation needs and orchestrate reviews in time for the releases. Besides working on new requests, you also need a method for maintaining existing documentation and ensuring quality. From SDK releases to kickoff meetings and more, you need processes to follow. To facilitate communication, tech writers should be visible and participate in the activities, forums, and channels around them.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/docapis_managing_doc_processes.html
    type: web

  - title: "DX content strategy with developer portals"
    jurl: /learnapidoc/docapis_dx_content_strategy.html

  - title: "Following agile scrum with documentation projects"
    jurl: /learnapidoc/pubapis_agile_scrum_for_docs.html

  - title: "Managing large documentation projects"
    jurl: /learnapidoc/docapis_managing_doc_projects.html

  - title: "Managing small documentation requests"
    jurl: /learnapidoc/docapis_managing_small_doc_requests.html

  - title: "Managing SDK releases"
    jurl: /learnapidoc/docapis_managing_sdk_releases.html

  - title: "Documentation kickoff meetings and product demos"
    jurl: /learnapidoc/docapis_kickoff_meeting_agenda.html

  - title: "Processes for reviewing documentation"
    jurl: /learnapidoc/docapis_review_processes.html

  - title: "Maintaining existing documentation"
    jurl: /learnapidoc/docapis_doc_maintenance_processes.html

  - title: "Collecting feedback post-release"
    jurl: /learnapidoc/docapis_collecting_feedback_post_release.html

  - title: "Managing content from external contributors"
    jurl: /learnapidoc/docapis_processes_for_external_contributors.html

  - title: "Changing internal doc culture"
    jurl: /learnapidoc/docapis_changing_internal_doc_culture.html

  - title: "Sending doc status reports -- a tool for visibility and relationship building"
    jurl: /learnapidoc/docapis_status_reports.html

  - title: Broadcasting your meeting notes to influence a wider audience
    jurl: /learnapidoc/docapis_meeting_notes.html

  - title: "Ensuring documentation coverage with each software release"
    jurl: /learnapidoc/docapis_release_process.html

- title: "Chapter 15: Metrics and measurement"
  landing: /learnapidoc/docapis_metrics_and_measurement.html
  section: fifteen
  description: >
    Measuring API documentation quality and tracking its improvement is a frequent management request that's challenging to fulfill. User surveys and satisfaction scores offer some insight, but they shouldn't be the only evaluation tools. This chapter provides a comprehensive quality checklist for API documentation and developer portals, spanning more than 70 different aspects that involve accuracy, clarity, completeness, and relevance across your API documentation. This checklist can help highlight areas to focus on and be a springboard for discussion about ways to improve your developer portal. Although scoring methods are possible, your primary focus should be to agree on clear, actionable standards for documentation quality.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/docapis_metrics_and_measurement.html
    type: web

  - title: Measuring documentation quality through user feedback
    jurl: /learnapidoc/docapis_measuring_impact.html

  - title: Different approaches for assessing information quality
    jurl: /learnapidoc/docapis_metrics_assessing_information_quality.html

  - title: Quality checklist for API documentation
    jurl: /learnapidoc/docapis_quality_checklist.html

  - title: Quantifying your progress
    jurl: /learnapidoc/docapis_metrics_quantifying_progress.html

- title: "Chapter 16: Glossary"
  landing: /learnapidoc/glossary_overview.html
  section: seventeen
  description: >
    This glossary provides definitions and explanations for over 130 key terms related to API documentation. The terms span a wide range of topics relevant to documenting REST APIs, including general API concepts, OpenAPI/Swagger specifics, API parameters, responses, methods, tools, project management approaches, writing best practices, and more. The terms are organized alphabetically as well as by common topic groups, allowing you to easily browse terms within certain subject areas.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/glossary_overview.html
    type: web

  - title: "Glossary"
    jurl: /learnapidoc/glossary.html

  - title: "Glossary groups"
    jurl: /learnapidoc/glossary_groups.html

- title: "Chapter 17: Additional resources"
  landing: /learnapidoc/resources.html
  section: eighteen
  description: > 
    Additional resources provides a variety of supplementary material to expand on topics covered in the course. This is also the section where content gets archived that no longer fits into the other chapters. There are several hands-on activities for calling additional APIs to get more practice working with endpoints, parameters, and responses. Tutorials are provided for two (semi-abanoned) API specification formats: RAML and API Blueprint. The chapter also contains answer keys for activities, as well as video recordings of previous workshops.
  folderitems:

  - title: "Overview"
    jurl: /learnapidoc/resources.html
    type: web

  - title: "Documenting GraphQL APIs"
    jurl: /learnapidoc/docapis_graphql_apis.html

  - title: "More REST API activities"
    jurl: /learnapidoc/docapis_more_rest_activities.html

  - title: "Activity: Get event information using the Eventbrite API"
    jurl: /learnapidoc/docapis_eventbrite_example.html

  - title: "Activity: Retrieve a gallery using the Flickr API"
    jurl: /learnapidoc/docapis_flickr_example.html

  - title: "Activity: Get wind speed using the Aeris Weather API"
    jurl: /learnapidoc/docapis_aerisweather_example.html

  - title: "RAML tutorial"
    jurl: /learnapidoc/pubapis_raml.html

  - title: "API Blueprint tutorial"
    jurl: /learnapidoc/pubapis_api_blueprint.html

  - title: "API jeopardy answer key"
    jurl: /learnapidoc/jeopardy_answer_key.html

  - title: "What's wrong with this topic answer key"
    jurl: /learnapidoc/whats_wrong_answer_key.html

  - title: "Menlo Park API workshop video recording"
    jurl: /learnapidoc/menlo_park_workshop_recording.html

  - title: "Denver API workshop video recording"
    jurl: /learnapidoc/denver_workshop_recording.html

  - title: "API doc presentation video recordings"
    jurl: /learnapidoc/api_doc_presentations.html